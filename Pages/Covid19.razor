@page "/covid19"

@inject HttpClient Http

@using NodaTime

@using GGNet
@using GGNet.Palettes
@using GGNet.Elements
@using GGNet.NaturalEarth

@using Table.Net 

@if (data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row h-100 w-100 m-0 p-0">

        <div class="col-md-6 col-lg-6 h-100 m-0 p-0 d-flex flex-column">
            <div class="flex-grow-0 flex-md-shrink-1 pl-5">
                <h2>2019–20 coronavirus pandemic</h2>
                <p>Data Source: <a href="https://www.who.int/emergencies/diseases/novel-coronavirus-2019/situation-reports"> World Health Organization - Situation Reports</a></p>
            </div>
            <div class="flex-grow-0 flex-md-shrink-1">
                <div style="height: 0; padding-bottom: calc(360 / 720 * 100%);">
                    <GGNet.Components.Plot Data=@map T=TS TX=Double TY=Double Width=720 Height=360 />
                </div>
            </div>

            <div class="position-relative d-flex flex-grow-1 flex-shrink-1">
                <div class="position-absolute w-100 h-100 d-flex flex-column overflow-hidden">
                    <div class="d-flex flex-column" style="min-height: 0;">
                        <div class="pt-3" style="overflow-x: hidden; overflow-y: auto;">
                            <Table Loader=@(() => Loader.Data(data)) Context="p" Small=true OnRowClick=@((TS o) => OnClick(o))>
                                <Loading><p>Loading...</p></Loading>
                                <Header>
                                    <Column Field="Name" Label="Country" Sortable=true />
                                    <Column Field="ConfirmedCumulative" Label="Confirmed" Sortable=true />
                                    <Column Field="ConfirmedDelta" Label="&Delta;" Sortable=true />
                                    <Column Field="DeathsCumulative" Label="Deaths" Sortable="true" />
                                    <Column Field="DeathsDelta" Label="&Delta;" Sortable=true />
                                </Header>
                                <Row>

                                    @{
                                            var (confirmed, deaths) = sparks[p.Country.A2];
                                    }

                                    <Cell>@(p.Country.Name)</Cell>

                                    <Cell Align=Align.Right>
                                        <div class="row text-center">
                                            <div class="col">
                                                <div style="width: 75px; height: 25px;">
                                                    <GGNet.Components.SparkLine Data=@confirmed T=TS.Point TX=LocalDate TY=Double />
                                                </div>
                                            </div>
                                            <div class="col" style="font-size: 0.75em;">
                                                @($"{p.ConfirmedCumulative:#,##0}")
                                            </div>
                                        </div>

                                    </Cell>
                                    <Cell Align=Align.Right>
                                        <div style="font-size: 0.75em;">
                                            +@($"{p.ConfirmedDelta:#,##0}")
                                        </div>
                                    </Cell>
                                    <Cell Align=Align.Right>
                                        <div class="row text-center">
                                            <div class="col">
                                                <div style="width: 75px; height: 25px;">
                                                    <GGNet.Components.SparkLine Data=@deaths T=TS.Point TX=LocalDate TY=Double />
                                                </div>
                                            </div>
                                            <div class="col" style="font-size: 0.75em;">
                                                @($"{p.DeathsCumulative:#,##0}")
                                            </div>
                                        </div>

                                    </Cell>
                                    <Cell Align=Align.Right>
                                        <div style="font-size: 0.75em;">
                                            +@($"{p.DeathsDelta:#,##0}")
                                        </div>
                                    </Cell>
                                </Row>
                            </Table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6 col-lg-6 h-100 m-0 p-0 d-flex flex-column">
            <div class="card w-100 h-100">
                <div class="card-header">
                    <ul class="nav nav-tabs card-header-tabs">
                        <li class="nav-item">
                            <a class="nav-link @(showChart ? "active" : "")" href="" @onclick=Swap><i class="fas fa-chart-line mr-1"></i>Chart</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @(showChart ? "" : "active")" href="" @onclick=Swap><i class="fas fa-table mr-1"></i>Data</a>
                        </li>
                    </ul>
                </div>
                <div class="card-body d-flex p-0">
                    <div class="tab-content d-flex flex-grow-1">

                        <div class="tab-pane @(showChart ? "active" : "") flex-grow-1">
                            <div class="h-100 mx-auto mt-3" style="width: 95%;">
                                <GGNet.Components.Plot Data=@statData T=StatPoint TX=LocalDate TY=Double RenderPolicy=RenderPolicy.Auto @ref=@statPlot />
                            </div>
                        </div>

                        <div class="tab-pane @(showChart ? "" : "d-flex flex-grow-1")">
                            <div class="position-relative d-flex flex-grow-1">
                                <div class="position-absolute w-100 h-100 d-flex flex-column overflow-hidden">
                                    <div class="d-flex flex-column" style="min-height: 0;">
                                        <div class="overflow-auto pt-3 mx-auto" style="width: 95%;">
                                            <Table Loader=@(() => Loader.Data(ts.Points)) Context="p" Small=true>
                                                <Loading><p>Loading...</p></Loading>
                                                <Header>
                                                    <Column Field="Date" Sort="-1"/>
                                                    <Column Label="Confirmed" />
                                                    <Column Label="Deaths" />
                                                </Header>
                                                <Row>
                                                    <Cell>@(p.Date)</Cell>
                                                    <Cell Align=Align.Left>@($"{p.ConfirmedCumulative:#,##0} (+{p.ConfirmedDelta:#,##0})")</Cell>
                                                    <Cell Align=Align.Left>@($"{p.DeathsCumulative:#,##0} (+{p.DeathsDelta:#,##0})")</Cell>
                                                </Row>
                                            </Table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    List<TS> data;
    TS ts;

    Data<TS, double, double> map;

    List<StatPoint> statPoints;
    Source<StatPoint> statSource = new Source<StatPoint>();
    Data<StatPoint, LocalDate, double> statData;
    GGNet.Components.Plot<StatPoint, LocalDate, double> statPlot;

    Dictionary<string, (Data<TS.Point, LocalDate, double> confirmed, Data<TS.Point, LocalDate, double> deaths)> sparks =
        new Dictionary<string, (Data<TS.Point, LocalDate, double> confirmed, Data<TS.Point, LocalDate, double> deaths)>();

    protected override async Task OnInitializedAsync()
    {
        data = await GetData();

        var sparkTheme = Theme.Default(dark: false);
        sparkTheme.Tooltip.Text.Size = new Size { Value = 16, Units = Units.px };

        foreach (var ts in data)
        {
            var source = new Source<TS.Point>(ts.Points.TakeLast(15));

            var confirmed = Plot.New(source, o => o.Date, o => o.ConfirmedCumulative)
                .Geom_Bar(tooltip: o => $"{o.ConfirmedCumulative:#,###0}", fill: "#758bd1", alpha: 0.8, animation: true)
                .Theme(sparkTheme);

            var deaths = Plot.New(source, o => o.Date, o => o.DeathsCumulative)
                .Geom_Bar(tooltip: o => $"{o.DeathsCumulative:#,###0}", fill: "#d18975", alpha: 0.8, animation: true)
                .Theme(sparkTheme);

            sparks[ts.Country.A2] = (confirmed, deaths);
        }

        data = data.OrderByDescending(o => o.ConfirmedCumulative).ToList();

        var theme = Theme.Default(dark: false);

        theme.Panel.Grid.Major.X.Alpha = 0.25;
        theme.Panel.Grid.Minor.X.Alpha = 0.25;
        theme.Panel.Grid.Major.Y.Alpha = 0.25;
        theme.Panel.Grid.Minor.Y.Alpha = 0.25;

        theme.Tooltip.Margin = new Margin();
        theme.Tooltip.Background = "#FFFFFF";
        theme.Tooltip.Alpha = 1.0;
        theme.Tooltip.Text.Color = "#000000";

        map = Plot.New(data, o => o.Country.Capital.Point.Longitude, o => o.Country.Capital.Point.Latitude)
            .Geom_Map(Scale110.Coastline, fill: "grey", alpha: 0.1)
            .Geom_Point(onclick: (ts, e) => OnClick(ts), tooltip: Tooltip, color: "#000000", alpha: 0.5, animation: true)
            .Scale_Longitude()
            .Scale_Latitude()
            .Scale_Color_Discrete(o => o.Country.Continent, Colors.Viridis, guide: false)
            .Scale_Size_Continuous(o => o.ConfirmedCumulative, range: (1, 12), guide: false)
            .Theme(theme);

        ts = data.Single(o => o.Country.A2 == "CN");
        statPoints = GetStatPoints(ts.Points);
        statSource.Add(statPoints);

        var palette = Discrete<Stat, string>.Enum(new[] { "#758bd1", "#d18975" });

        statData = Plot.New(statSource, o => o.Date, o => o.Cumulative)
            .Geom_Bar(y: o => o.Delta, tooltip: Tooltip, alpha: 0.6, position: PositionAdjustment.Stack)
            .Geom_Line(tooltip: Tooltip, width: 3, alpha: 0.8)
            .Scale_Y_Continuous("#,##0")
            .Scale_Color_Discrete(o => o.Stat, palette)
            .Scale_Fill_Discrete(o => o.Stat, palette, guide: false)
            .Title("China")
            .Theme(dark: false, legend: GGNet.Position.Bottom);
    }

    public async Task OnClick(TS point)
    {
        statSource.Clear();
        statPoints.Clear();

        statPoints.AddRange(GetStatPoints(point.Points));
        statSource.Add(statPoints);

        statData.Title(point.Country.Name);

        StateHasChanged();

        await statPlot.RefreshAsync().ConfigureAwait(false);
    }

    public string Tooltip(TS ts) =>
$@"
<div class=""border rounded"" style=""padding: 5px 10px;"">
    <div class=""text-center font-weight-bold border-bottom"" style=""color: var(--tooltip-color);"">{ts.Country.Name}</div>
    <div class=""d-flex justify-content-center"">
        <div><div class=""text-center mr-2"">Confirmed</div><div class=""text-center font-weight-bold mr-2"" style=""color: #758bd1"">{ts.ConfirmedCumulative:#,##0} (+{ts.ConfirmedDelta:#,##0})</div></div>
        <div><div class=""text-center"">Deaths</div><div class=""text-center font-weight-bold"" style=""color: #d18975"">{ts.DeathsCumulative:#,##0} (+{ts.DeathsDelta:#,##0})</div></div>
    </div>
</div>
";

    public string Tooltip(StatPoint o) => $"<b>{o.Date}</b><br/>{o.Stat}: {o.Cumulative:#,##0} (+{o.Delta:#,##0})";

    private bool showChart = true;

    private void Swap() => showChart = !showChart;
}
