@namespace GGNet.Site.Pages
@page "/examples/live"

@implements IAsyncDisposable

@using System.Threading
@using System.Threading.Tasks

@using NodaTime

@using GGNet
@using GGNet.Datasets

<div class="container-fluid mt-4">

    <div class="row m-4">
        <div class="col-md-6">
            <h2>Live Data</h2>
            <p>Refresh plots on data updates. Wherever possible, internal objects are pooled to increase throughput and decrease garbage collection pressure.</p>
            <div class="border rounded-lg p-3 mt-3">
                <pre class="html">
<span class="pl-kos">&lt;</span><span class="pl-c1">Plot</span>
    <span class="pl-c1">Data</span>=<span class="pl-s">@@spy</span>
    <span class="pl-c1">T</span>=<span class="pl-s">SPY.Bar</span>
    <span class="pl-c1">TX</span>=<span class="pl-s">LocalDate</span>
    <span class="pl-c1">TY</span>=<span class="pl-s">Double</span>
    <span class="pl-c1">RenderPolicy</span>=<span class="pl-s">RenderPolicy.Auto</span>
    <span class="pl-c1">@@ref</span>="<span class="pl-s">plot</span>" /&gt;
</pre>
<pre class="csharp">
<span class="pl-smi">@@code</span> {
    ...
    <span class="pl-c"><span class="pl-c">//</span> Invoke to reflect changes made to the source or plot properties</span>
    <span class="pl-k">await</span> <span class="pl-smi">plot</span>.<span class="pl-en">RefreshAsync</span>().<span class="pl-en">ConfigureAwait</span>(<span class="pl-c1">false</span>);
    ...
}
</pre>
            </div>
        </div>
        <div class="col-md-6">
            <div class="border rounded-lg p-1" style="background-color: #252A32;">
                <GGNet.Components.Plot Data=@spy T=SPY.Bar TX=LocalDate TY=Double RenderPolicy=RenderPolicy.Auto @ref="plot" />
            </div>
        </div>
    </div>
</div>

@code {

    private Source<SPY.Bar> source;
    private Data<SPY.Bar, LocalDate, double> spy;
    private GGNet.Components.Plot<SPY.Bar, LocalDate, double> plot;

    private SPY.Bar[] bars = SPY.Load();

    protected override void OnInitialized()
    {
        source = new Source<SPY.Bar>();

        for (var i = 0; i < 10; i++)
        {
            source.Add(bars[i++]);
        }

        spy = Plot.New(source, x: o => o.date, y: o => o.close)
            .Title("SPY US Equity")
            .Geom_Area(alpha: 0.3)
            .Scale_X_Discrete_Date(expand: (0, 0, 0, 0))
            .YLab("Close")
            .Caption("Source: Bloomberg")
            .Theme(axisY: Position.Right);
    }

    private readonly CancellationTokenSource cancellation = new CancellationTokenSource();

    private Task task;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        await Task.Factory.StartNew(async () =>
        {
            try
            {
                var token = cancellation.Token;

                await Task.Delay(500, token).ConfigureAwait(false);
                if (token.IsCancellationRequested)
                {
                    return;
                }

                var i = 10;

                var rnd = new Random();

                while (!token.IsCancellationRequested)
                {
                    var bar = bars[i];
                    var close = bar.close;

                    source.Add(bar);

                    for (var j = 0; j < 10; j++)
                    {
                        bar.close = bar.low + rnd.NextDouble() * (bar.high - bar.low);

                        await plot.RefreshAsync().ConfigureAwait(false);

                        await Task.Delay(rnd.Next(0, 2500)).ConfigureAwait(false);
                    }

                    bar.close = close;

                    if (++i == bars.Length)
                    {
                        break;
                    }
                }
            }
            catch (Exception e)
            {
            }
        }, TaskCreationOptions.LongRunning);
    }

    public async ValueTask DisposeAsync()
    {
        cancellation?.Cancel();
        cancellation?.Dispose();

        if (task != null)
        {
            await task.ConfigureAwait(false);
        }
    }
}
