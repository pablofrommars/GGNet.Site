@namespace GGNet.Site.Pages
@page "/examples/live"

@using System.Threading
@using System.Threading.Tasks

@using NodaTime

@using GGNet

<div class="container-fluid mt-4">

    <div class="row m-4">
        <div class="col-md-6">
            <h2>Live Data</h2>
            <p>Refresh plots on data updates. Wherever possible, internal objects are pooled to increase throughput and decrease garbage collection pressure.</p>
            <div class="border rounded-lg bg-light p-3 mt-3">
<pre class="html">
<span class="pl-kos">&lt;</span><span class="pl-ent">Plot</span> <span class="pl-c1">Data</span>=<span class="pl-s">&#64;data</span> <span class="pl-c1">T</span>="<span class="pl-s">Datasets.SPY.Bar</span>" <span class="pl-c1">TX</span>="<span class="pl-s">LocalDate</span>" <span class="pl-c1">TY</span>="<span class="pl-s">Double</span>" <span class="pl-c1">&#64;ref</span>="<span class="pl-s">plot</span>" /&gt;
</pre>
<pre class="csharp">
<span class="pl-smi">&#64;code</span> {
   ...
   <span class="pl-smi">data</span>.<span class="pl-en">Render</span>(<span class="pl-smi">first</span>: <span class="pl-c1">false</span>);
   <span class="pl-smi">plot</span>.<span class="pl-en">Render</span>();
   ...
}
</pre>
            </div>
        </div>
        <div class="col-md-6">
            <div class="border rounded-lg p-1" style="background-color: #252A32;">
                <GGNet.Components.Plot Data=@spy T="GGNet.Datasets.SPY.Bar" TX="LocalDate" TY="Double" @ref="plot" />
            </div>
        </div>
    </div>
</div>

@code {

    private GGNet.Source<GGNet.Datasets.SPY.Bar> source;
    private Data<GGNet.Datasets.SPY.Bar, LocalDate, double> spy;
    private GGNet.Components.Plot<GGNet.Datasets.SPY.Bar, LocalDate, double> plot;

    protected override void OnInitialized()
    {
        source = new GGNet.Source<GGNet.Datasets.SPY.Bar>();

        spy = Plot.New(source, x: o => o.date, y: o => o.close)
            .Title("SPY US Equity")
            .Geom_Area(alpha: 0.3)
            .Scale_X_Discrete_Date(expand: (0, 0, 0, 0))
            .YLab("Close")
            .Caption("Source: Bloomberg")
            .Theme(axisY: GGNet.Position.Right);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var cancellation = new CancellationTokenSource();

        var buffer = new ConcurrentBuffer(source);

        var bars = GGNet.Datasets.SPY.Load();

        {
            var i = 0;

            while (i < 10)
            {
                var bar = bars[i++];

                await buffer.Add(bar);
                await buffer.Touch(bar);
            }
        }

        Task.Factory.StartNew(async () =>
        {
            try
            {
                var token = cancellation.Token;

                var i = 10;

                var rnd = new Random();

                while (!token.IsCancellationRequested)
                {
                    var bar = bars[i];
                    var close = bar.close;

                    await buffer.Add(bar);

                    for (var j = 0; j < 10; j++)
                    {
                        bar.close = bar.low + rnd.NextDouble() * (bar.high - bar.low);

                        await buffer.Touch(bar);

                        //Thread.Sleep(rnd.Next(0, 25));
                        //Thread.Sleep(rnd.Next(0, 2500));
                        await Task.Delay(rnd.Next(0, 2500));
                    }

                    await buffer.Touch(bar);
                    bar.close = close;

                    if (++i == bars.Length)
                    {
                        break;
                    }
                }
            }
            catch (Exception e)
            {
            }
        }, TaskCreationOptions.LongRunning);

        Task.Factory.StartNew(async () =>
        {
            try
            {
                var token = cancellation.Token;

                //var spin = new SpinWait();

                while (!token.IsCancellationRequested)
                {
                    if (await buffer.Snapshot())
                    {
                        try
                        {
                            spy.Render(false);
                            plot.Render();
                        }
                        finally
                        {
                            buffer.Release();
                        }

                        //Thread.Sleep(250);
                        await Task.Delay(250);

                        await InvokeAsync(StateHasChanged);
                    }

                    await Task.Delay(250);
                    //spin.SpinOnce();
                }
            }
            catch (Exception e)
            {
            }
        }, TaskCreationOptions.LongRunning);
    }

    public class ConcurrentBuffer
    {
        private readonly GGNet.Source<GGNet.Datasets.SPY.Bar> source;

        private volatile int busy = 0;
        private volatile int touched = 0;

        public ConcurrentBuffer(GGNet.Source<GGNet.Datasets.SPY.Bar> source) => this.source = source;

        public int Count => source.Count;

        public GGNet.Datasets.SPY.Bar this[int index] => source[index];

        public async Task Add(GGNet.Datasets.SPY.Bar value)
        {
            //var spin = new SpinWait();

            while (true)
            {
                if (0 == Interlocked.Exchange(ref busy, 1))
                {
                    try
                    {
                        source.Add(value);
                    }
                    finally
                    {
                        Interlocked.Exchange(ref touched, 1);
                        Interlocked.Exchange(ref busy, 0);
                    }

                    return;
                }


                await Task.Delay(250);

                //spin.SpinOnce();
            }
        }

        public async Task Touch(GGNet.Datasets.SPY.Bar value)
        {
            // var spin = new SpinWait();

            while (true)
            {
                if (0 == Interlocked.Exchange(ref busy, 1))
                {
                    try
                    {
                    }
                    finally
                    {
                        Interlocked.Exchange(ref touched, 1);
                        Interlocked.Exchange(ref busy, 0);
                    }

                    return;
                }

                await Task.Delay(250);

                //Thread.Sleep(250);
                //spin.SpinOnce();
            }
        }

        public async Task<bool> Snapshot()
        {
            if (touched == 0)
            {
                return false;
            }

            //var spin = new SpinWait();

            while (true)
            {
                if (0 == Interlocked.Exchange(ref busy, 1))
                {
                    return true;
                }

                await Task.Delay(250);

                //spin.SpinOnce();
                //Thread.Sleep(250);

            }
        }

        public void Release()
        {
            Interlocked.Exchange(ref touched, 0);
            Interlocked.Exchange(ref busy, 0);
        }
    }
}
