@namespace GGNet.Site.Pages
@page "/examples/interactivity"

@using GGNet

    <div class="container-fluid mt-4">

        <div class="row m-4">

            <div class="col-md-6">
                <h2>Interactivity</h2>
                <p>Geom interaction through events</p>
                <p><b>OnMouseOver:</b> @hover</p>
                <p><b>OnClick:</b> @clicked</p>
                <div class="border rounded-lg p-3 mt-3">
<pre class="csharp">
<span class="pl-smi">Plot</span>.<span class="pl-en">New</span>(<span class="pl-smi">source</span>, <span class="pl-smi">x</span>: <span class="pl-smi">o</span> <span class="pl-k">=&gt;</span> <span class="pl-smi">o</span>.<span class="pl-smi">X</span>, <span class="pl-smi">y</span>: <span class="pl-smi">o</span> <span class="pl-k">=&gt;</span> <span class="pl-smi">o</span>.<span class="pl-smi">Y</span>)
    .<span class="pl-en">Geom_Line</span>()
    .<span class="pl-en">Geom_Point</span>(<span class="pl-smi">onclick</span>: <span class="pl-smi">OnClick</span>, <span class="pl-smi">onmouseover</span>: <span class="pl-smi">OnMouseOver</span>, <span class="pl-smi">onmouseout</span>: <span class="pl-smi">OnMouseOut</span>)
    .<span class="pl-en">YLab</span>(<span class="pl-s"><span class="pl-pds">"</span>Sin(x)<span class="pl-pds">"</span></span>)
    .<span class="pl-en">XLab</span>(<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)
    .<span class="pl-en">Theme</span>();
    
<span class="pl-en">Task</span> <span class="pl-en">OnClick</span>(<span class="pl-en">Point</span> <span class="pl-smi">point</span>, <span class="pl-en">MouseEventArgs</span> <span class="pl-smi">e</span>)
{
    ...
}

<span class="pl-en">Task</span> <span class="pl-en">OnMouseOver</span>(<span class="pl-en">Point</span> <span class="pl-smi">point</span>, <span class="pl-en">MouseEventArgs</span> <span class="pl-smi">e</span>)
{
    ...
}

<span class="pl-en">Task</span> <span class="pl-en">OnMouseOut</span>(<span class="pl-en">Point</span> <span class="pl-smi">point</span>, <span class="pl-en">MouseEventArgs</span> <span class="pl-smi">e</span>)
{
    ...
}

<span class="pl-k">class</span> <span class="pl-en">Point</span>
{
    <span class="pl-k">public</span> <span class="pl-k">double</span> <span class="pl-smi">X</span> { <span class="pl-k">get</span>; <span class="pl-k">set</span>; }
    <span class="pl-k">public</span> <span class="pl-k">double</span> <span class="pl-smi">Y</span> { <span class="pl-k">get</span>; <span class="pl-k">set</span>; }
}
</pre>
                </div>
            </div>

            <div class="col-md-6">
                <div class="border rounded-lg p-1"  style="background-color: #252A32;">
                    <GGNet.Components.Plot Data=@data T="Point" TX="Double" TY="Double" />
                </div>
            </div>

        </div>
    </div>

@code {

    Data<Point, double, double> data;

    private string hover;
    private string clicked;

    protected override void OnInitialized()
    {
        var curve = new GGNet.Source<Point>();
        var points = new GGNet.Source<Point>();

        var x = -System.Math.PI;
        var increment = 1.0 / 100;

        while (x <= System.Math.PI)
        {
            curve.Add(new Point
            {
                X = x,
                Y = System.Math.Sin(x)
            });

            x += increment;
        }

        points.Add(new Point { X = -1.0 * System.Math.PI, Y = System.Math.Sin(-1.0 * System.Math.PI) });
        points.Add(new Point { X = -0.75 * System.Math.PI, Y = System.Math.Sin(-0.75 * System.Math.PI) });
        points.Add(new Point { X = -0.5 * System.Math.PI, Y = System.Math.Sin(-0.5 * System.Math.PI) });
        points.Add(new Point { X = -0.25 * System.Math.PI, Y = System.Math.Sin(-0.25 * System.Math.PI) });
        points.Add(new Point { X = 0 * System.Math.PI, Y = System.Math.Sin(0 * System.Math.PI) });
        points.Add(new Point { X = 0.25 * System.Math.PI, Y = System.Math.Sin(0.25 * System.Math.PI) });
        points.Add(new Point { X = 0.5 * System.Math.PI, Y = System.Math.Sin(0.5 * System.Math.PI) });
        points.Add(new Point { X = 0.75 * System.Math.PI, Y = System.Math.Sin(0.75 * System.Math.PI) });
        points.Add(new Point { X = 1.0 * System.Math.PI, Y = System.Math.Sin(1.0 * System.Math.PI) });

        data = Plot.New(curve, x: o => o.X, y: o => o.Y)
            .Geom_Line()
            .Geom_Point(points, o => o.X, o => o.Y, onclick: OnClick, onmouseover: OnMouseOver, onmouseout: OnMouseOut, animation: true)
            .YLab("Sin(x)")
            .XLab("x")
            .Theme();
    }

    public Task OnClick(Point point, MouseEventArgs e)
    {
        clicked = $"Sin({point.X}) = {point.Y}";
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task OnMouseOver(Point point, MouseEventArgs e)
    {
        hover = $"Sin({point.X}) = {point.Y}";
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task OnMouseOut(Point point, MouseEventArgs e)
    {
        hover = string.Empty;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public class Point
    {
        public double X { get; set; }
        public double Y { get; set; }
    }
}
